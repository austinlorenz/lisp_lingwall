(defun movement_key (x)
    (or (equal x '(:RIGHT))
	(equal x '(:LEFT))
	(equal x '(:UP))
	(equal x '(:DOWN))
	(equal x '(:PGUP))
	(equal x '(:PGDN))
	(equal x '(:HOME))
	(equal x '(:END))
	(equal x '(#\j))
	(equal x '(#\k))
	(equal x '(#\l))
	(equal x '(#\h))
	(equal x '(#\J))
	(equal x '(#\K))
	(equal x '(#\L))
	(equal x '(#\H))
	(equal x '(#\y))
	(equal x '(#\u))
	(equal x '(#\b))
	(equal x '(#\n))
	(equal x '(#\Y))
	(equal x '(#\U))
	(equal x '(#\B))
	(equal x '(#\N))
    )
)

;;note that failed movements should not cost a turn
(defun move_player (direction) 
    (let ((x (eval (first (dir2co direction)))) (y (eval (second (dir2co direction)))))
    (cond ((or (not x) (not y)) nil)
	  ((is_accessible x y) 
		(cond ((and (> (euclidean_distance *player-x* *player-y* x y) 2) (>= (player-energy *player*) (player-jumpcost *player*)))
		          (decf (player-energy *player*) (player-jumpcost *player*)) (setf *player-x* x) (setf *player-y* y))
		      ((> (euclidean_distance *player-x* *player-y* x y) 2) (message "You don't have enough energy.") (read_keyboard))
		      (t (setf *player-x* x) (setf *player-y* y))
		)
	  )
	  ((and (is_creature_position x y) (adjacent *player-x* *player-y* x y)) 
		(creature-hit (get_creature_at_position x y *creatures*) (to_damage *player*) "melee")
	  )
          (t nil (read_keyboard)))))

			
(defun dir2co (direction)
    (cond ((or (equal direction '(:RIGHT)) 
	       (equal direction '(#\l))) 
	  '((1+ *player-x*) *player-y*)) 
          ((or (equal direction '(:LEFT)) 
	       (equal direction '(#\h))) 
	  '((1- *player-x*) *player-y*))
          ((or (equal direction '(:UP)) 
	       (equal direction '(#\k))) 
	  '(*player-x* (1+ *player-y*)))
          ((or (equal direction '(:DOWN))
	       (equal direction '(#\j))) 
	  '(*player-x* (1- *player-y*)))
          ((or (equal direction '(#\y)) (equal direction '(:HOME))) 
	  '((1- *player-x*) (1+ *player-y*)))
          ((or (equal direction '(#\u)) (equal direction '(:PGUP))) 
	  '((1+ *player-x*) (1+ *player-y*)))
          ((or (equal direction '(#\b)) (equal direction '(:END))) 
	  '((1- *player-x*) (1- *player-y*)))
          ((or (equal direction '(#\n)) (equal direction '(:PGDN))) 
	  '((1+ *player-x*) (1- *player-y*)))
	  ((equal direction '(#\H)) 
	  '((- *player-x* *jump-length*) *player-y*))
	  ((equal direction '(#\L)) 
	  '((+ *player-x* *jump-length*) *player-y*))
	  ((equal direction '(#\K)) 
	  '(*player-x* (+ *player-y* *jump-length*)))
	  ((equal direction '(#\J)) 
	  '(*player-x* (- *player-y* *jump-length*)))
	  ((equal direction '(#\Y))  
	  '((- *player-x* 3) (+ *player-y* 3)))
	  ((equal direction '(#\U)) 
	  '((+ *player-x* 3) (+ *player-y* 3)))
	  ((equal direction '(#\B)) 
	  '((- *player-x* 3) (- *player-y* 3)))
	  ((equal direction '(#\N)) 
	  '((+ *player-x* 3) (- *player-y* 3)))
           (t (read_keyboard))))

(defun fuego_attack (z) 
	(cond 
	    ((not z) z)
	    ((< (euclidean_distance (creature-x-location (car z)) (creature-y-location (car z)) *player-x* *player-y*) 5) 
	            (creature-hit (car z) (+ (roll_dice 4 6) (* 2 (player-level *player*))) "fire")
		    (fuego_attack (cdr z)))
	    (t (fuego_attack (cdr z))) 
	)
)


