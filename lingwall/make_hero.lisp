(defparameter *player* (make-player))

(defun create_player () (progn
    (princ "Enter your name:")
    (fresh-line)
    (setf (player-name *player*) (read))
    (princ "Choose your species")
    (fresh-line)
    (princ "a) Human")
    (fresh-line)
    (princ "b) Sasquatch")
    (fresh-line)
    (princ "c) Troodon")
    (fresh-line)
    (princ "d) Wolf")
    (fresh-line)
    (let ((ri (read_input)))
    (cond ((equal ri '(#\a)) (setf (player-species *player*) 'Human))
	  ((equal ri '(#\b)) (setf (player-species *player*) 'Sasquatch))
	  ((equal ri '(#\c)) (setf (player-species *player*) 'Troodon))
	  ((equal ri '(#\d)) (setf (player-species *player*) 'Wolf))
    )
    (setf (player-energy *player*)  20)
    (setf (player-experience *player*) 1)
    (setf (player-level *player*) 0)
    (setf (player-strength *player*) (roll_dice 3 6))
    (setf (player-dexterity *player*) (roll_dice 3 6))
    (setf (player-constitution *player*) (roll_dice 3 6))
    (setf (player-base_melee_skill *player*) 50)
    (setf (player-AC *player*) 10)
    (setf (player-satiation *player*) 1500)
    (setf (player-hydration *player*) 1500)
    (setf (player-jumpcost *player*) 1)
    )
)
)

(defun enforce_minmax ()
	(setf (player-energy *player*) (min (player-energy *player*) (max_energy *player*)))
	(setf (player-energy *player*) (max (player-energy *player*) 0))
	(setf (player-hitpoints *player*) (min (player-hitpoints *player*) (max_hitpoints *player*)))
	(setf (player-strength *player*) (max (player-strength *player*) 1))
	(setf (player-dexterity *player*) (max (player-dexterity *player*) 1))
	(setf (player-constitution *player*) (max (player-constitution *player*) 1))
)

(defun race_modify ()
    (cond ((equal (player-species *player*) 'Sasquatch) (incf (player-strength *player*) 4)
							(decf (player-dexterity *player*) 4)
							(incf (player-constitution *player*) 3)
							(incf (player-jumpcost *player*) 2))
	  ((equal (player-species *player*) 'Troodon)   (decf (player-strength *player*) 2)
							(incf (player-dexterity *player*) 3)
							(decf (player-constitution *player*) 2)
							(decf (player-jumpcost *player*) 1))
	  ((equal (player-species *player*) 'Wolf)      (decf (player-strength *player*) 2)
							(incf (player-dexterity *player*) 0)
							(incf (player-constitution *player*) 1))
    )
    (setf (player-hitpoints *player*) (max_hitpoints *player*)) 
    (enforce_minmax)
)

(defun max_hitpoints (c)
	(* (creature-constitution c) 5)
)

(defun max_energy (p)
	(+ 15 (player-level p))	
)


