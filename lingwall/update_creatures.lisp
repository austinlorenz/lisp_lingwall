(defmethod update_creature (c)
    (cond 
        ((adjacent (creature-x-location c) (creature-y-location c) *player-x* *player-y*) (monster-attack c))
	((< (euclidean_distance (creature-x-location c) (creature-y-location c) *player-x* *player-y*) 6) (move_to c 15 *player-x* *player-y*))
	(t (random_move c))
    )
)

(defmethod update_creature ((c wolf))
    (cond 
        ((adjacent (creature-x-location c) (creature-y-location c) *player-x* *player-y*) (monster-attack c))
	((< (euclidean_distance (creature-x-location c) (creature-y-location c) *player-x* *player-y*) 6) (move_to c 15 *player-x* *player-y*))
	(t (random_move c))
    )
)

(defmethod update_creature ((c cyborg))
	(cond 
	    ((adjacent (creature-x-location c) (creature-y-location c) *player-x* *player-y*) (monster-attack c))
	    ((< (euclidean_distance (creature-x-location c) (creature-y-location c) *player-x* *player-y*) 7) (move_to c 15 *player-x* *player-y*))
	    (t (patrol c))
	)
)

(defmethod update_creature ((c mining_machine))
    (let ((z (rand_adjacent (creature-x-location c) (creature-y-location c))))
	(when (is_wall (first z) (second z)) (dig (first z) (second z)))
    )
    (patrol c)
)

(defmethod update_creature ((c dog))
    (let ((x (random-n 1)) (y (random-n 1)))	
	(cond 
	    ((and (adjacent (creature-x-location c) (creature-y-location c) *player-x* *player-y*)
		  (some (lambda (z) (equal (creature-x-location z) *stair-x*) (equal (creature-y-location z) *stair-y*)) *creatures*)) (monster-attack c))
	    ((and (< (euclidean_distance *player-x* *player-y* *stair-x* *stair-y*) 6) 
	          (equal (creature-x-location c) *stair-x*)
	          (equal (creature-y-location c) *stair-y*)
	    ) (when (= (random 10) 0) (message "The dog growls.")))
	    ((< (euclidean_distance *player-x* *player-y* *stair-x* *stair-y*) 6) (move_to c 15 *stair-x* *stair-y*))
	    ((or (and (= x 0) (= y 0)) 
		 (and (is_accessible (+ (creature-x-location c) x) (+ (creature-y-location c) y))
		      (< (euclidean_distance (+ (creature-x-location c) x) (+ (creature-y-location c) y) *stair-x* *stair-y*) 3)	
		 )
	     )
	            (setf (creature-x-location c) (+ (creature-x-location c) x)) 
		    (setf (creature-y-location c) (+ (creature-y-location c) y))
	    )
	)
    )
)

(defun update_creatures () 
    (mapcar #'update_creature *creatures*)
)
    
    
(defmethod monster-attack (m)
    (cond ((< (randval 100) (hit_percentage m *player*)) 
	          (message (concatenate 'string (string-capitalize (unique_the m)) " " (creature-type m) " " (creature-attack_style m) " you.")) 
		  (decf (player-hitpoints *player*) (to_damage m)))
	  (t (message (concatenate 'string (string-capitalize (unique_the m)) " " (creature-type m) " misses you.")))
    )
)

(defmethod monster-attack ((m rat))
    (cond ((< (randval 100) (hit_percentage m *player*)) 
	          (message "The rat bites you.") 
		  (decf (player-hitpoints *player*) (to_damage m))
		  (when (= (random 2) 0) (message "The rat's bite poisons you!") (poison *player*))
	  )
	  (t (message "The rat misses you."))
    )
)

(defmethod move_to (c n a b) 
  (when (= n 0) (random_move c))
  (when (> n 0)
    (let ((x (creature-x-location c)) (y (creature-y-location c)) (r1 (random-n 1)) (r2 (random-n 1)))
	(cond ((and (is_accessible (+ x r1) (+ y r2))
		   (> (euclidean_distance x y a b) (euclidean_distance (+ x r1) (+ y r2) a b))
	      )
	      (setf (creature-x-location c) (+ x r1))
	      (setf (creature-y-location c) (+ y r2)))
	      (t (move_to c (- n 1) a b))
	)
    )
  )
)

(defmethod move_away (c n a b) 
  (when (= n 0) (random_move c))
  (when (> n 0)
    (let ((x (creature-x-location c)) (y (creature-y-location c)) (r1 (random-n 1)) (r2 (random-n 1)))
	(cond ((and (is_accessible (+ x r1) (+ y r2))
		   (< (euclidean_distance x y a b) (euclidean_distance (+ x r1) (+ y r2) a b))
	      )
	      (setf (creature-x-location c) (+ x r1))
	      (setf (creature-y-location c) (+ y r2)))
	      (t (move_to c (- n 1) a b))
	)
    )
  )
)

(defmethod patrol (c) 
    (when (not (and (creature-x-destination c) (creature-y-destination c)))
	(new_destination c)	
    )
    (when (and (equal (creature-x-location c) (creature-x-destination c)) 
	       (equal (creature-y-location c) (creature-y-destination c))
	  )
	(new_destination c)
    )
    (when (= (random 10) 0) (new_destination c))
    (move_to c 15 (creature-x-destination c) (creature-y-destination c))
)

(defun new_destination (c)
    (let ((z (rand_accessible)))
	    (setf (creature-x-destination c) (first z))
	    (setf (creature-y-destination c) (second z))
    )
)

(defun random_move (c)
    (let ((x (random-n 1)) (y (random-n 1)))
        (when (or (and (= x 0) (= y 0)) (is_accessible (+ (creature-x-location c) x) (+ (creature-y-location c) y)))	
	            (setf (creature-x-location c) (+ (creature-x-location c) x)) 
		    (setf (creature-y-location c) (+ (creature-y-location c) y))
	)
    )
)


