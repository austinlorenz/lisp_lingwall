(defun trans (x)
    (cond ((equal x "to go") "aller")
	  ((equal x "to make") "faire")
	  ((equal x "to have") "avoir")
	  ((equal x "to eat") "manger")
	  ((equal x "to drink") "boire")
	  ((equal x "to burn") "incendier")
    )
)

;;General function to send verbs to appropriate conjugation function.
(defun conj (x)
    (cond ((equal x "aller") (aller-conj))
	  ((equal x "manger") (manger-conj))
	  ((equal x "boire") (boire-conj))
	  ((equal (subseq (reverse x) 0 2) "re") (reg-er-conj (subseq x 0 (- (length x) 2))))
    )
)

(defun reg-er-conj (stem)
	(cond ((equal *pronoun* "je") (concatenate 'string stem "e"))
	      ((or (equal *pronoun* "elle") (equal *pronoun* "il")) (concatenate 'string stem "e"))
	      ((equal *pronoun* "vous") (concatenate 'string stem "ez")) 
	      ((equal *pronoun* "tu") (concatenate 'string stem "es"))
	      ((equal *pronoun* "nous") (concatenate 'string stem "ons"))
	      ((or (equal *pronoun* "ils") (equal *pronoun* "elles")) (concatenate 'string stem "ent"))
	)
)

(defun manger-conj ()
	(cond ((equal *pronoun* "nous") "mangeons")
	      (t (reg-er-conj "mang"))
	)
)

(defun aller-conj ()
    (cond
	((equal *pronoun* "je") "vais")
	((or (equal *pronoun* "elle") (equal *pronoun* "il")) "va")
	((equal *pronoun* "vous") "allez") 
	((equal *pronoun* "tu") "vas")
	((equal *pronoun* "nous") "allons")
	((or (equal *pronoun* "ils") (equal *pronoun* "elles")) "vont")
    )
)


(defun boire-conj ()
        (cond ((equal *pronoun* "je") "bois")
	      ((or (equal *pronoun* "elle") (equal *pronoun* "il")) "boit")
	      ((equal *pronoun* "vous") "buvez") 
	      ((equal *pronoun* "tu") "bois")
	      ((equal *pronoun* "nous") "buvons")
	      ((or (equal *pronoun* "ils") (equal *pronoun* "elles")) "boivent")
	)
)
