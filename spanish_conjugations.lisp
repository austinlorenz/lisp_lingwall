;;General function to send verbs to appropriate conjugation function.
(defun conj (x)
    (cond ((equal x "ir") (ir-conj))
	  ((equal x "tener") (tener-conj))
	  ((equal x "hacer") (hacer-conj))
	  ((equal x "almorzar") (almorzar-conj))
	  ((equal x "estar") (estar-conj))
	  ((equal (subseq (reverse x) 0 2) "ra") (reg-ar-conj (subseq x 0 (- (length x) 2))))
	  ((equal (subseq (reverse x) 0 2) "re") (reg-er-conj (subseq x 0 (- (length x) 2))))
	  ((equal (subseq (reverse x) 0 2) "ri") (reg-ir-conj (subseq x 0 (- (length x) 2))))
    )
)


(defun reflexive ()
	(cond ((equal *L2-pronoun* "yo") "me")
	      ((or (equal *L2-pronoun* "usted") (equal *L2-pronoun* "ella") (equal *L2-pronoun* "el")) "se")
	      ((equal *L2-pronoun* "tu") "te")
	      ((or (equal *L2-pronoun* "nosotros") (equal *L2-pronoun* "nosotras")) "nos")
	      ((or (equal *L2-pronoun* "ellos") (equal *L2-pronoun* "ellas") (equal *L2-pronoun* "ustedes")) "se")
	)
)

(defun reg-ar-conj (stem)
	(cond ((equal *L2-pronoun* "infinitive") (concatenate 'string stem "ar"))
	      ((equal *L2-pronoun* "yo") (concatenate 'string stem "o"))
	      ((or (equal *L2-pronoun* "usted") (equal *L2-pronoun* "ella") (equal *L2-pronoun* "el")) (concatenate 'string stem "a"))
	      ((equal *L2-pronoun* "tu") (concatenate 'string stem "as"))
	      ((or (equal *L2-pronoun* "nosotros") (equal *L2-pronoun* "nosotras")) (concatenate 'string stem "amos"))
	      ((or (equal *L2-pronoun* "ellos") (equal *L2-pronoun* "ellas") (equal *L2-pronoun* "ustedes")) (concatenate 'string stem "an"))
	)
)

(defun reg-er-conj (stem)
	(cond ((equal *L2-pronoun* "infinitive") (concatenate 'string stem "er"))
	      ((equal *L2-pronoun* "yo") (concatenate 'string stem "o"))
	      ((or (equal *L2-pronoun* "usted") (equal *L2-pronoun* "ella") (equal *L2-pronoun* "el")) (concatenate 'string stem "e"))
	      ((equal *L2-pronoun* "tu") (concatenate 'string stem "es"))
	      ((or (equal *L2-pronoun* "nosotros") (equal *L2-pronoun* "nosotras")) (concatenate 'string stem "emos"))
	      ((or (equal *L2-pronoun* "ellos") (equal *L2-pronoun* "ellas") (equal *L2-pronoun* "ustedes")) (concatenate 'string stem "en"))
	)
)

(defun reg-ir-conj (stem)
	(cond ((equal *L2-pronoun* "infinitive") (concatenate 'string stem "ir"))
	      (t (reg-er-conj (stem)))
	)
)

(defun ir-conj ()
	(cond ((equal *L2-pronoun* "yo") "voy")
	      (t (reg-ar-conj "v"))
	)
)

(defun estar-conj ()
	(cond ((equal *L2-pronoun* "yo") "estoy")
	      (t (reg-ar-conj "est"))
	)
)

(defun tener-conj ()
	(cond ((equal *L2-pronoun* "infinitive") "tener")
	      ((equal *L2-pronoun* "yo") "tengo")
	      ((or (equal *L2-pronoun* "nosotros") (equal *L2-pronoun* "nosotras")) "tenemos")
	      (t (reg-er-conj "tien"))
	)
)

(defun hacer-conj ()
	(cond ((equal *L2-pronoun* "yo") "hago")
	      (t (reg-er-conj "hac"))
	)
)

(defun almorzar-conj ()
	(cond ((equal *L2-pronoun* "nosotros") "almorzamos")
	      (t (reg-ar-conj "almuerz"))
	)
)

