(defparameter *L1-pronouns* '("I"))
(defparameter *L1-pronoun* nil)
(defparameter *L2-pronoun* nil)
(defparameter *L2* "Spanish")

;;When L2 has more finely grained pronouns than L1, choose between them randomly with a subconditional.  Then modify command display accordingly.
;;Note that probability of such pronouns will no longer be uniform.
;;Break this function up into three parts, and put it into three files, to be loaded as appropriate when language is chosen.
(defun set-pronoun ()
   (setf *L1-pronoun* (nth (random (length *L1-pronouns*)) *L1-pronouns*))
   (when (equal *L2* "Spanish")
	(cond  
	   ((equal *L1-pronoun* "infinitive") (setf *L2-pronoun* "infinitive"))
	   ((equal *L1-pronoun* "I") (setf *L2-pronoun* "yo")) 
	   ((equal *L1-pronoun* "you") (let ((r (random 3)))
				           (cond
						((= r 0) (setf *L2-pronoun* "tu"))
						((= r 1) (setf *L2-pronoun* "usted"))
						((= r 2) (setf *L2-pronoun* "ustedes"))
					   )
					)
	   )
	   ((equal *L1-pronoun* "he") (setf *L2-pronoun* "el"))
	   ((equal *L1-pronoun* "she") (setf *L2-pronoun* "ella"))
	   ((equal *L1-pronoun* "they") (let ((r (random 2)))
		                            (cond
						((= r 0) (setf *L2-pronoun* "ellos"))
						((= r 1) (setf *L2-pronoun* "ellas"))
					    )
					)
	   )
	   ((equal *L1-pronoun* "we") (let ((r (random 2)))
	                                   (cond
						((= r 0) (setf *L2-pronoun* "nosotros"))
						((= r 1) (setf *L2-pronoun* "nosotras"))
					    )
					)
	   )
        )
   )
   (when (equal *L2* "French")
       (cond  
	   ((equal *L1-pronoun* "infinitive") (setf *L2-pronoun* "infinitive"))
	   ((equal *L1-pronoun* "I") (setf *L2-pronoun* "je")) 
	   ((equal *L1-pronoun* "you") (let ((r (random 2)))
				           (cond
						((= r 0) (setf *L2-pronoun* "tu"))
						((= r 1) (setf *L2-pronoun* "vous"))
					   )
					)
	   )
	   ((equal *L1-pronoun* "he") (setf *L2-pronoun* "il"))
	   ((equal *L1-pronoun* "she") (setf *L2-pronoun* "elle"))
	   ((equal *L1-pronoun* "they") (let ((r (random 2)))
		                            (cond
						((= r 0) (setf *L2-pronoun* "ils"))
						((= r 1) (setf *L2-pronoun* "elles"))
					    )
					)
	   )
	   ((equal *L1-pronoun* "we") (setf *L2-pronoun* "nous")) 
        )

  )
  (when (equal *L2* "Esperanto")
     (cond  
	   ((equal *L1-pronoun* "infinitive") (setf *L2-pronoun* "infinitive"))
	   ((equal *L1-pronoun* "I") (setf *L2-pronoun* "mi")) 
	   ((equal *L1-pronoun* "you") (setf *L2-pronoun* "vi"))
	   ((equal *L1-pronoun* "he") (setf *L2-pronoun* "li"))
	   ((equal *L1-pronoun* "she") (setf *L2-pronoun* "sxi"))
	   ((equal *L1-pronoun* "they") (setf *L2-pronoun* "ili"))
	   ((equal *L1-pronoun* "we") (setf *L2-pronoun* "ni")) 
     )
  )
)
